{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { GraphQLClient } from \"graphql-request\";\nimport fetch from \"isomorphic-unfetch\";\nvar client = new GraphQLClient(\"http://localhost:3000/api/graphql\");\nexport var fetchGraphQL =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(query) {\n    var headers,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            headers = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n\n            if (!headers) {\n              _context.next = 6;\n              break;\n            }\n\n            client.setHeaders(headers);\n            return _context.abrupt(\"return\", client.request(query));\n\n          case 6:\n            return _context.abrupt(\"return\", client.request(query));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchGraphQL(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var checkIfisAuthorized =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(jwtToken) {\n    var url;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = \"/api/CheckIfAuthenticated\";\n            return _context2.abrupt(\"return\", fetch(url, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: _JSON$stringify({\n                jwtToken: jwtToken\n              })\n            }).then(function (data) {\n              // console.log(data);\n              return data.json();\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function checkIfisAuthorized(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["C:\\xampp\\htdocs\\ovi_port_website\\app\\components\\HelperFunctions.js"],"names":["GraphQLClient","fetch","client","fetchGraphQL","query","headers","setHeaders","request","checkIfisAuthorized","jwtToken","url","method","body","then","data","json"],"mappings":";;;AAAA,SAASA,aAAT,QAA8B,iBAA9B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,IAAMC,MAAM,GAAG,IAAIF,aAAJ,CAAkB,mCAAlB,CAAf;AAEA,OAAO,IAAMG,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,iBAAeC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAsBC,YAAAA,OAAtB,2DAAgC,IAAhC;;AAAA,iBACtBA,OADsB;AAAA;AAAA;AAAA;;AAGtBH,YAAAA,MAAM,CAACI,UAAP,CAAkBD,OAAlB;AAHsB,6CAKjBH,MAAM,CAACK,OAAP,CAAeH,KAAf,CALiB;;AAAA;AAAA,6CAOjBF,MAAM,CAACK,OAAP,CAAeH,KAAf,CAPiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAZD,YAAY;AAAA;AAAA;AAAA,GAAlB;AAWP,OAAO,IAAMK,mBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAG,kBAAeC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,YAAAA,GAD2B,GACrB,2BADqB;AAAA,8CAE1BT,KAAK,CAACS,GAAD,EAAM;AAChBC,cAAAA,MAAM,EAAE,MADQ;AAEhBN,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT,eAFO;AAKhBO,cAAAA,IAAI,EAAE,gBAAe;AACnBH,gBAAAA,QAAQ,EAARA;AADmB,eAAf;AALU,aAAN,CAAL,CAQJI,IARI,CAQC,UAAAC,IAAI,EAAI;AACd;AACA,qBAAOA,IAAI,CAACC,IAAL,EAAP;AACD,aAXM,CAF0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBP,mBAAmB;AAAA;AAAA;AAAA,GAAzB","sourcesContent":["import { GraphQLClient } from \"graphql-request\";\r\nimport fetch from \"isomorphic-unfetch\";\r\nconst client = new GraphQLClient(\"http://localhost:3000/api/graphql\");\r\n\r\nexport const fetchGraphQL = async function(query, headers = null) {\r\n  if (headers) {\r\n    {\r\n      client.setHeaders(headers);\r\n    }\r\n    return client.request(query);\r\n  } else {\r\n    return client.request(query);\r\n  }\r\n};\r\n\r\nexport const checkIfisAuthorized = async function(jwtToken) {\r\n  const url = \"/api/CheckIfAuthenticated\";\r\n  return fetch(url, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    },\r\n    body: JSON.stringify({\r\n      jwtToken\r\n    })\r\n  }).then(data => {\r\n    // console.log(data);\r\n    return data.json();\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}