{"ast":null,"code":"var __jsx = React.createElement;\nimport React from \"react\";\nimport App, { Container } from \"next/app\";\nimport \"../static/styles/_mainStyle.scss\";\nimport \"../static/styles/_helperClases.scss\";\nimport \"../static/styles/_materialDesignInput.scss\";\nimport \"bootstrap/dist/css/bootstrap.min.css\"; // import Head from \"next/head\";\n\nimport { Provider } from \"react-redux\";\nimport withReduxStore from \"../components/React-Redux/with-redux-store\"; // import { createStore, applyMiddleware } from \"redux\";\n// import UserReducer from \"../components/ReactContext/UserReducer\";\n// import { persistStore, persistReducer } from \"redux-persist\";\n// // import storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web and AsyncStorage for react-native\n// import storage from \"redux-persist/lib/storage/session\";\n// import { PersistGate } from \"redux-persist/integration/react\";\n// import thunk from \"redux-thunk\";\n\nclass MyApp extends App {\n  // componentDidMount() {\n  //   // Remove the server-side injected CSS.\n  //   const jssStyles = document.querySelector(\"#jss-server-side\");\n  //   if (jssStyles) {\n  //     jssStyles.parentNode.removeChild(jssStyles);\n  //   }\n  // }\n  // Only uncomment this method if you have blocking data requirements for\n  // every single page in your application. This disables the ability to\n  // perform automatic static optimization, causing every page in your app to\n  // be server-side rendered.\n  //\n  // static async getInitialProps(appContext) {\n  //   // calls page's `getInitialProps` and fills `appProps.pageProps`\n  //   const appProps = await App.getInitialProps(appContext);\n  //   return { ...appProps };\n  // }\n  render() {\n    const {\n      Component,\n      pageProps,\n      reduxStore\n    } = this.props; // const persistConfig = {\n    //   key: \"root\",\n    //   storage\n    // };\n    // const persistedReducer = persistReducer(persistConfig, UserReducer);\n    // let store = createStore(persistedReducer, applyMiddleware(thunk));\n    // let persistor = persistStore(store);\n\n    return (//   <PersistGate loading={null} persistor={persistor}>\n      __jsx(Provider, {\n        store: reduxStore\n      }, __jsx(Component, pageProps)) //   </PersistGate>\n\n    );\n  }\n\n}\n\nexport default withReduxStore(MyApp);","map":null,"metadata":{},"sourceType":"module"}