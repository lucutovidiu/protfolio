{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport { GraphQLClient } from \"graphql-request\";\nimport fetch from \"isomorphic-unfetch\";\nvar client = new GraphQLClient(\"http://localhost:3000/api/graphql\");\nexport var fetchGraphQL =\n/*#__PURE__*/\nfunction () {\n  var _ref = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(query) {\n    var headers,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            headers = _args.length > 1 && _args[1] !== undefined ? _args[1] : null;\n\n            if (!headers) {\n              _context.next = 6;\n              break;\n            }\n\n            client.setHeaders(headers);\n            return _context.abrupt(\"return\", client.request(query));\n\n          case 6:\n            return _context.abrupt(\"return\", client.request(query));\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchGraphQL(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var checkIfisAuthorized =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(jwtToken) {\n    var url;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            url = \"/api/CheckIfAuthenticated\";\n            return _context2.abrupt(\"return\", fetch(url, {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: _JSON$stringify({\n                jwtToken: jwtToken\n              })\n            }).then(function (data) {\n              // console.log(data);\n              return data.json();\n            }));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function checkIfisAuthorized(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":null,"metadata":{},"sourceType":"module"}