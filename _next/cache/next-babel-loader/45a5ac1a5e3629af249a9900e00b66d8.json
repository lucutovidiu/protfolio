{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useRef, useState, useContext } from \"react\";\nimport { Col } from \"react-bootstrap\";\nimport { fetchGraphQL } from \"../HelperFunctions\";\nimport CustomModel from \"../HelperComponents/CustomModel\";\nimport validator from \"validator\";\nimport { useDispatch } from \"react-redux\";\n\nvar LoginComponent = function LoginComponent(props) {\n  var dispatch = useDispatch();\n  var userEmail = useRef(\"\");\n  var password = useRef(\"\");\n\n  var _useState = useState({\n    showModal: false,\n    msgHeader: \"\",\n    msgBody: []\n  }),\n      modal = _useState[0],\n      setModel = _useState[1];\n\n  var handleClose = function handleClose() {\n    return setModel({\n      showModal: false,\n      msgHeader: \"\",\n      msgBody: []\n    });\n  };\n\n  var handleShow = function handleShow(msgHeader, msgBody) {\n    return setModel({\n      showModal: true,\n      msgHeader: msgHeader,\n      msgBody: msgBody\n    });\n  };\n\n  function fetchUser() {\n    var query = \"\\n    {\\n      TryLogin(userEmail:\\\"\".concat(userEmail.current.value, \"\\\",password: \\\"\").concat(password.current.value, \"\\\")\\n      }\\n    \");\n    fetchGraphQL(query).then(function (data) {\n      try {\n        var _JSON$parse = JSON.parse(data.TryLogin),\n            msg = _JSON$parse.msg,\n            jwtToken = _JSON$parse.jwtToken,\n            role = _JSON$parse.role;\n\n        if (msg === \"ok\") {\n          dispatch({\n            type: \"AUTH_USER\",\n            payload: {\n              loggedInUser: userEmail.current.value,\n              jwt: jwtToken,\n              role: role\n            }\n          });\n          window.location = \"/\"; // handleShow(\"Success\", [\"you're logged in\"]);\n        } else {\n          handleShow(\"Error\", [\"Username or password incorect!!\"]);\n        }\n      } catch (err) {\n        handleShow(\"Error\", [\"Internal Error\"]);\n      } // if (msg === \"ok\") {\n      //   console.log(jwtToken);\n      // }\n\n    })[\"catch\"](function (err) {\n      console.log(err);\n      handleShow(\"Error\", [\"Username or password incorect!!\"]);\n    });\n  }\n\n  function loginMe() {\n    var errMsg = [];\n    if (!validator.isEmail(userEmail.current.value)) errMsg.push(\"Invalid Email\");\n    if (validator.isEmpty(password.current.value)) errMsg.push(\"Password can not be Empty\");\n\n    if (errMsg.length > 0) {\n      handleShow(\"Error\", errMsg);\n    } else {\n      fetchUser();\n    }\n  }\n\n  return __jsx(React.Fragment, null, __jsx(CustomModel, {\n    show: modal.showModal,\n    handleClose: handleClose,\n    msgHeader: modal.msgHeader,\n    msgBody: modal.msgBody\n  }), __jsx(Col, {\n    xs: 12\n  }, __jsx(\"h4\", {\n    style: {\n      color: \"#01c851\"\n    },\n    className: \"text-center\"\n  }, \"Login\")), __jsx(Col, {\n    xs: 12,\n    className: \"pt-5\"\n  }, __jsx(\"div\", {\n    className: \"group\"\n  }, __jsx(\"input\", {\n    type: \"text\",\n    required: true,\n    ref: userEmail\n  }), __jsx(\"span\", {\n    className: \"bar\"\n  }), __jsx(\"label\", null, \"Email\"))), __jsx(Col, {\n    xs: 12\n  }, __jsx(\"div\", {\n    className: \"group\"\n  }, __jsx(\"input\", {\n    type: \"password\",\n    required: true,\n    ref: password\n  }), __jsx(\"span\", {\n    className: \"bar\"\n  }), __jsx(\"label\", null, \"Password\"))), __jsx(Col, {\n    xs: 12,\n    className: \"pt-3\"\n  }, __jsx(\"button\", {\n    onClick: loginMe,\n    className: \"btn btn-success\",\n    type: \"submit\"\n  }, \"Login\"), __jsx(\"button\", {\n    onClick: props.toggleLogin,\n    className: \"btn btn-success ml-3\",\n    type: \"submit\"\n  }, \"Signup \", __jsx(\"i\", {\n    className: \"fas fa-long-arrow-alt-right\"\n  }))), __jsx(Col, {\n    xs: 12,\n    className: \"mt-3\"\n  }, __jsx(\"button\", {\n    onClick: props.forgotPassword,\n    className: \"btn btn-outline-ligh\",\n    type: \"submit\"\n  }, \"Forgot Password\")));\n};\n\nexport default LoginComponent;","map":null,"metadata":{},"sourceType":"module"}